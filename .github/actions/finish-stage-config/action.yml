name: "Finish Stage config"
description: |
  This composite action automates the process of configuring and setting up Twilio for a new stage.
  It requires Step 1 to be completed and a new stack deployed into AWS.

inputs:
  stage_name:
    description: "Stage name (e.g. alcanza-staging | helios-prod)"
    required: true
    type: string
  aws_region:
    description: "AWS region"
    required: true
    default: "us-east-1"
  twilio_account_sid:
    description: "Twilio Account SID"
    required: true
  twilio_auth_token:
    description: "Twilio Auth Token"
    required: true
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true    
  openai_api_key:
    description: "OpenAI API Key to use"
    required: true
  openai_organization:
    description: "OpenAI Organization to use"
    required: true


env:
  BASE_STACK: "neurality"  

runs:
  using: "composite"
  steps:
    - name: Install system requirements
      run: |
        set -euo pipefail
        echo "Starting system requirements installation..."
        sudo apt-get update -yqq && sudo apt-get install -yq --no-install-recommends openssl
        echo "System requirements installation completed."
      shell: bash

    - id: config      
      name: "Configure Twilio secrets"
      run: |
        set -euo pipefail

        stage_name="${{ inputs.stage_name }}"
        echo "Configuring job for stage: ${stage_name}"

        echo "stack_name=${{ env.BASE_STACK }}-${stage_name}" >> "${GITHUB_OUTPUT}"          
     
        # Convert stage-name to STAGE-NAME and create Twilio variables
        twilio_secret_infix="${stage_name^^}"
        twilio_secret_infix="${twilio_secret_infix//-/_}"

        echo "AWS_DEFAULT_REGION=${{ inputs.aws_region }}" >> "${GITHUB_ENV}"
        echo "TWILIO_ACCOUNT_SID=${{ inputs.twilio_account_sid }}" >> "${GITHUB_ENV}"
        echo "TWILIO_AUTH_TOKEN=${{ inputs.twilio_auth_token }}" >> "${GITHUB_ENV}"

        echo "Twilio secrets configured successfully."
      shell: bash  

    - name: "Install Twilio CLI"
      uses: "./.github/actions/install_node/"
      with:
        install-twilio-cli: "true"

    - name: "Test Twilio CLI Configuration"
      run: |
        set -euo pipefail

        echo "Testing Twilio CLI authentication..."        
        twilio api core accounts list
        echo "Twilio CLI authentication successful. Secrets validated."
      shell: bash
      env:
        TWILIO_ACCOUNT_SID: "${{ inputs.twilio_account_sid }}"
        TWILIO_AUTH_TOKEN: "${{ inputs.twilio_auth_token }}"      

    - id: "twilio"
      name: "Configure Twilio details"
      run: |
        set -euo pipefail
        echo "Starting Twilio configuration..."

        function get_flex_flow_sid() {
          echo "Fetching Flex Flow SID..."
          twilio api flex v1 flex-flows list -o json | jq -r '.[0].sid'
        }

        # Grab Account name
        echo "Fetching account details..."
        accounts_output="$(twilio api core accounts list -o json)"
        account_sid="$(echo "${accounts_output}" | jq -r '.[0].sid')"
        
        account_sid="${account_sid:2}"  # Strip AC from SID to stop GitHub Actions from masking this value
        
        account_name="$(echo "${accounts_output}" | jq -r '.[0].friendlyName')"
        
        # List all available phone numbers and pick first as default one
        echo "Fetching phone number..."
        phone_number="$(twilio phone-numbers list -o json | jq -r '.[0].phoneNumber')"
        echo "Phone Number fetched: ${phone_number}"

        # List all conversations services and pick first service
        echo "Fetching Conversations Service SID..."
        conversations_service_sid="$(twilio api conversations v1 services list -o json | jq -r '.[0].sid')"
        
        # Check if Flex Flow SID already exists
        echo "Checking for existing Flex Flow SID..."
        flex_flow_sid="$(get_flex_flow_sid)"
        if [ -z "${flex_flow_sid}" ]; then
          echo "No existing Flex Flow SID found. Fetching Studio Flow SID..."
          studio_flow_sid="$(twilio api studio v2 flows list -o json | jq -r '.[] | select(.friendlyName == "${{ env.STUDIO_CHAT_FLOW_FRIENDLY_NAME }}") | .sid')"
                    
          twilio api flex v1 flex-flows create \
            --channel-type="web" \
            --chat-service-sid="${conversations_service_sid}" \
            --friendly-name="${{ env.FLEX_FLOW_FRIENDLY_NAME }}" \
            --enabled \
            --integration-type="studio" \
            --integration.flow-sid="${studio_flow_sid}" \
            --janitor-enabled

          echo "Fetching newly created Flex Flow SID..."
          flex_flow_sid="$(get_flex_flow_sid)"
        fi
        
        # Set outputs for latter usage
        echo "Setting outputs..."
        echo "account_sid=${account_sid}" >> "${GITHUB_OUTPUT}"
        echo "account_name=${account_name}" >> "${GITHUB_OUTPUT}"
        echo "phone_number=${phone_number}" >> "${GITHUB_OUTPUT}"
        echo "conversations_service_sid=${conversations_service_sid}" >> "${GITHUB_OUTPUT}"
        echo "flex_flow_sid=${flex_flow_sid}" >> "${GITHUB_OUTPUT}"

        # And update job summary for visibility
        echo "Updating job summary..."
        echo "## Twilio Details" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Account SID: **AC**${account_sid}" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Account Name: **${account_name}**" >> "${GITHUB_STEP_SUMMARY}"
        echo "" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Phone Number: ${phone_number}" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Conversations Service SID: \`${conversations_service_sid}\` (_for post-webhook update_)" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Flex Flow SID: \`${flex_flow_sid}\` (_for Flex Widget update_)" >> "${GITHUB_STEP_SUMMARY}"

        echo "Twilio configuration complete."
      env:
        TWILIO_ACCOUNT_SID: "${{ inputs.twilio_account_sid }}"
        TWILIO_AUTH_TOKEN: "${{ inputs.twilio_auth_token }}"        
      shell: bash


    - id: "twilio-api-key"
      name: "Create new Twilio API Key"
      run: |
        set -euo pipefail
        echo "Starting creation of a new Twilio API Key..."

        keys_output="$(twilio api core keys create -o json --friendly-name="[AUTO] API Key for ${{ steps.config.outputs.stack_name }}")"
        sid="$(echo "${keys_output}" | jq -r '.[0].sid')"

        echo "sid=${sid}" >> "${GITHUB_OUTPUT}"
        echo "secret=$(echo "${keys_output}" | jq -r '.[0].secret')" >> "${GITHUB_OUTPUT}"

        echo "- API Key: \`${sid}\`" >> "${GITHUB_STEP_SUMMARY}"

        echo "Twilio API Key creation process complete."
      env:        
        TWILIO_ACCOUNT_SID: "${{ inputs.twilio_account_sid }}"
        TWILIO_AUTH_TOKEN: "${{ inputs.twilio_auth_token }}"        
      shell: bash

    - name: Configure Twilio Account SID for stack
      uses: "./.github/actions/twilio_config/"
      with:
        stack-name: "${{ steps.config.outputs.stack_name }}"        
        account-sid: "${{ steps.twilio.outputs.account_sid }}"
        api-key: "${{ steps.twilio-api-key.outputs.sid }}"
        api-secret: "${{ steps.twilio-api-key.outputs.secret }}"
        default-phone-number: "${{ steps.twilio.outputs.phone_number }}"
        default-author-name: "${{ steps.config.outputs.customer_label }}"
        default-scenario-slug: "${{ steps.config.outputs.customer }}"
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}        

    - id: "cloudformation"
      name: "Setup CloudFormation vars"
      run: |
        set -euo pipefail

        stack_name="${{ steps.config.outputs.stack_name }}"

        key_id="$(bash ./.github/scripts/stack-output-value.sh "${stack_name}" "EnvironmentEncryptionKeyId")"          
        lambda_url="$(bash ./.github/scripts/stack-output-value.sh "${stack_name}" "Route53BackendCNAMERecordName")"

        echo "key_id=${key_id}" >> "${GITHUB_OUTPUT}"
        echo "lambda_url=${lambda_url}" >> "${GITHUB_OUTPUT}"

        echo "---" >> "${GITHUB_STEP_SUMMARY}"
        echo "## AWS CloudFormation Details" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Encryption Key ID: \`${key_id}\`" >> "${GITHUB_STEP_SUMMARY}"
      shell: bash

    - name: Setup SSM parameters for lambda functions
      run: |
        set -euo pipefail

        stack_name="${{ steps.config.outputs.stack_name }}"
        stage_name="${{ inputs.stage_name }}"
        key_id="${{ steps.cloudformation.outputs.key_id }}"

        function set_ssm_parameter() {
          parameter="${1}"
          value="${2}"

          parameter_name="/${stack_name}/lambda/${parameter}"

          if [ -z "$(aws ssm get-parameter --name="${parameter_name}" 2> /dev/null || :)" ]; then
            aws ssm put-parameter \
              --name="${parameter_name}" \
              --description="${parameter} secret for ${stack_name} stack" \
              --value="${value}" \
              --type="SecureString" \
              --key-id="${key_id}" \
              --tags="Key=CDK,Value=false" \
              --tags="Key=InfrastructureAutomation,Value=true" \
              --tags="Key=Stack,Value=${stack_name}" \
              --tags="Key=Stage,Value=${stage_name}"
            echo "Parameter ${parameter_name} has been set in SSM"
          else
            echo "Do not update ${parameter_name} as it already present in SSM"
          fi
        }

        function create_api_key() {
          KEY=`openssl rand -hex 16 | base64`
        }

        create_api_key

        set_ssm_parameter "WEBHOOK_API_KEY" "$KEY"                    
        set_ssm_parameter "OPENAI_API_KEY" "${{ env.OPENAI_API_KEY }}"
        set_ssm_parameter "OPENAI_ORGANIZATION" "${{ env.OPENAI_ORGANIZATION }}"          

        echo "SSM parameters have been set. All OK!"
      shell: bash
      env:          
        OPENAI_API_KEY: "${{ inputs.openai_api_key }}"
        OPENAI_ORGANIZATION: "${{ inputs.openai_organization }}"         

    - name: Setup post-webhook for Twilio Conversations Service
      run: |
        set -euo pipefail

        service_sid="${{ steps.twilio.outputs.conversations_service_sid }}"
        lambda_url="${{ steps.cloudformation.outputs.lambda_url }}"

        filters="onMessageAdded"
        post_webhook_url="${lambda_url}webhooks/twilio/conversation"

        twilio api conversations v1 services configuration webhooks update \
          --chat-service-sid="${service_sid}" \
          --filters="${filters}" \
          --method="POST" \
          --post-webhook-url="${post_webhook_url}"

        echo "Post-webhook for ${filters} event(s) set for service ${service_sid} to use: ${post_webhook_url}. All OK!"
      shell: bash

    - name: Update Flex Admin config
      run: |
        set -euo pipefail

        stack_name="${{ steps.config.outputs.stack_name }}"
        stage_name="${{ inputs.stage_name }}"
        customer_label="${{ steps.config.outputs.customer_label }}"

        account_sid="${{ steps.twilio.outputs.account_sid }}"
        account_name="${{ steps.twilio.outputs.account_name }}"

        lambda_url="${{ steps.cloudformation.outputs.lambda_url }}"
        lambda_url="${lambda_url::-1}"

        api_url="$(poetry run python3 infrastructure/automation/scripts/get_stage_url.py "${stage_name}" -u backend)"
        chat_url="$(poetry run python3 infrastructure/automation/scripts/get_stage_url.py "${stage_name}" -u flex_widget)"

        echo "---" >> "${GITHUB_STEP_SUMMARY}"
        echo "## Infrastructure Details" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Backend URL: ${api_url}" >> "${GITHUB_STEP_SUMMARY}"
        echo "- Chat (Flex Widget) URL: ${chat_url}" >> "${GITHUB_STEP_SUMMARY}"

        poetry run python3 infrastructure/automation/scripts/add_line.py \
          -A "    // DO NOT REMOVE: names added by Infrastructure Automation scripts" \
          -n "    | \"${account_name}\"" \
          twilio/admin/src/configs.ts

        new_config="// ${account_name} (${stack_name})
        const AC${account_sid}: Config = {
          sid: \"AC${account_sid}\",
          name: \"${account_name}\",
          logoUrl: \"${chat_url}/logo.png\",
          smsPrefix: \"This is ${customer_label} reaching back from our web chat.\n\",
          withAssistance: false,
          lambda_url:
            \"${lambda_url}\",
          api: \"${lambda_url}\",
        };
        "

        poetry run python3 infrastructure/automation/scripts/add_line.py \
          -A "// DO NOT REMOVE: config definitions added by Infrastructure Automation scripts" \
          -n "${new_config}" \
          twilio/admin/src/configs.ts

        poetry run python3 infrastructure/automation/scripts/add_line.py \
          -A "  // DO NOT REMOVE: configs added by Infrastructure Automation scripts" \
          -n "  AC${account_sid}," \
          twilio/admin/src/configs.ts
      shell: bash

    - name: Update Flex Admin deploy workflow
      run: |
        set -euo pipefail

        stack_name="${{ steps.config.outputs.stack_name }}"
        choice="${{ steps.twilio.outputs.account_name }} (${stack_name})"

        poetry run python3 infrastructure/automation/scripts/add_line.py \
          -A "          # DO NOT REMOVE: accounts added by Infrastructure Automation scripts" \
          -n "          - \"${choice}\"" \
          .github/workflows/flex_admin_deploy.yml

        new_infix="            \"${choice}\")\n                        echo \"Setup to use ${stack_name} Twilio credentials\"\n                        twilio_secret_infix=\"${{ steps.config.outputs.twilio_secret_infix }}\"\n                        ;;\n          "

        poetry run python3 infrastructure/automation/scripts/add_line.py \
          -A "            # DO NOT REMOVE: infixes added by Infrastructure Automation scripts" \
          -n "${new_infix}" \
          .github/workflows/flex_admin_deploy.yml
      shell: bash

    - name: Update Flex widget
      run: |
        set -euo pipefail

        # OS independent version of `sed -i`
        function replace_string() {
          file_name="${1}"
          find_string="${2}"
          replace_to="${3}"
          python3 -c "from pathlib import Path; (p := Path('${file_name}')).write_text(p.read_text().replace('${find_string}', '${replace_to}'))"
        }

        stack_name="${{ steps.config.outputs.stack_name }}"
        index_html="twilio/flex-widgets/${stack_name}/index.html"

        replace_string "${index_html}" "FLEX_FLOW_SID_TO_BE_CONFIGURED" "${{ steps.twilio.outputs.flex_flow_sid }}"
        replace_string "${index_html}" "LAMBDA_URL_TO_BE_CONFIGURED" "${{ steps.cloudformation.outputs.lambda_url }}"
      shell: bash

outputs:
  result:
    description: "Indicates if the stage configuration was completed successfully"
    value: "success"

