defaults:
  run:
    shell: "bash"

name: "Full Create Stage config"
run-name: "Full Create Stage config: ${{ inputs.customer }}-${{ inputs.stage }}"

on:
  workflow_dispatch:
    inputs:
      customer:
        description: "Customer (e.g. spaulding | ima | tekton)"
        required: true
        type: "string"

      stage:
        description: "Stage"
        required: true
        type: "choice"
        options:
          - staging
          - prod
        
      twilio_account_sid:
        description: "Twilio Account SID"
        required: true
        type: "string"

      flex_widget_subdomain_name:
        description: "Custom subdomain name for Flex Widget"
        default: ""
        type: "string"

      extra_email_identities:
        description: "Extra email identities to send email from (separate by space)"
        default: ""
        type: "string"

      cors_allow_origins:
        description: "CORS allow origins (separate by space)"
        default: ""
        type: "string"

      customer_extra_environment:
        description: "Customer extra environment (separate KEY=value by space)"
        default: ""
        type: "string"

      stage_extra_environment:
        description: "Stage extra environment (separate KEY=value by space)"
        default: ""
        type: "string"

      langchain_project:
        description: "LangChain project name (leave empty for default one)"
        default: ""
        type: "string"        

      customer_setup_content:
        description: "Parameter to run Meta Customer Script"
        default: ""
        type: "string"

env:
  PYTHONUNBUFFERED: "1"
  BASE_STACK: "neurality"
  FLEX_WIDGET_FAVICON_LINK_SOURCE: "../../../frontend-archive/public/favicon-aidemo.ico"
  FLEX_WIDGET_FAVICON_LINK_NAME: "favicon.ico"
  FLEX_WIDGET_LOGO_LINK_SOURCE: "../../../frontend-archive/src/assets/logo-aidemo.png"
  FLEX_WIDGET_LOGO_LINK_NAME: "logo.png"
  TWILIO_ACCOUNT_LABEL: ""

jobs:
  create_stage_config:
    name: "Create Stage config: ${{ inputs.customer }}-${{ inputs.stage }}"

    runs-on: "ubuntu-22.04"

    steps:      
        ########################### "Create Stage Config Workflow" ###########################
      - name: "Validate Inputs"
        run: |
          set -euo pipefail
      
          # List of important inputs to validate
          required_inputs=(
            "${{ inputs.customer }}"
            "${{ inputs.stage }}"
            "${{ inputs.twilio_account_sid }}"
          )
      
          # Check if any input is empty
          for input in "${required_inputs[@]}"; do
            if [ -z "$input" ]; then
              echo "::error::One or more required inputs are missing. Please provide all required inputs."
              exit 1
            fi
          done    

      - name: Print All Inputs
        run: |
          echo "Inputs provided to the workflow:"
          echo "Customer: ${{ inputs.customer }}"
          echo "Stage: ${{ inputs.stage }}"
          echo "Twilio Account Label: ${{ env.TWILIO_ACCOUNT_LABEL }}"
          echo "Twilio Account SID: ${{ inputs.twilio_account_sid }}"
          echo "Flex Widget Subdomain Name: ${{ inputs.flex_widget_subdomain_name }}"        
          echo "Customer Extra Environment: ${{ inputs.customer_extra_environment }}"          
          echo "Stage Extra Email Identities: ${{ inputs.extra_email_identities }}"          
          echo "CORS Allow Origins: ${{ inputs.cors_allow_origins }}"
          echo "LangChain Project: ${{ inputs.langchain_project }}"
          echo "Stage Extra Environment: ${{ inputs.stage_extra_environment }}"
        shell: bash        

          
      - uses: "actions/checkout@v4.1.7"
        name: "Checkout Code"      
    
      - id: "config"
        name: "Configure the job."
        run: |
          set -euo pipefail

          stage_name="${{ inputs.customer }}-${{ inputs.stage }}"

          echo "stage_name=${stage_name}" >> "${GITHUB_OUTPUT}"
          echo "stack_name=${{ env.BASE_STACK }}-${stage_name}" >> "${GITHUB_OUTPUT}"

      - id: "install"
        name: "Install backend"
        uses: "./.github/actions/install_backend/"
        # with:
        #   cache-key-suffix: "-infrastructure-test"
        #   poetry-install-args: "--only=infrastructure,test"

      - name: "Create customer config (if necessary)"
        run: |
          set -euo pipefail

          if [ -f "infrastructure/configs/${{ env.BASE_STACK }}/${{ inputs.customer }}.yml" ]; then
            echo "::notice::Customer config for ${{ inputs.customer }} already exists. Do nothing..."
          else
            poetry run python3 infrastructure/automation/scripts/create_customer_config.py \
              --extra-email-identities="${{ inputs.extra_email_identities }}" \
              --cors-allow-origins="${{ inputs.cors_allow_origins }}" \
              --extra-environment="${{ inputs.customer_extra_environment }}" \
              "${{ inputs.customer }}"
          fi

      - name: "Create stage config"
        run: |
          set -euo pipefail

          poetry run python3 infrastructure/automation/scripts/create_stage_config.py \
            --twilio-account-label="${{ env.TWILIO_ACCOUNT_LABEL }}" \
            --twilio-account-sid="${{ inputs.twilio_account_sid }}" \
            --flex-widget-subdomain-name="${{ inputs.flex_widget_subdomain_name }}" \
            --langchain-project="${{ inputs.langchain_project }}" \
            --extra-environment="${{ inputs.stage_extra_environment }}" \
            "${{ steps.config.outputs.stage_name }}"

      - name: "Create stage test"
        run: |
          set -euo pipefail

          poetry run python3 infrastructure/automation/scripts/create_stage_test.py \
            --langchain-project="${{ inputs.langchain_project }}" \
            --extra-email-identities="${{ inputs.extra_email_identities }}" \
            "${{ steps.config.outputs.stage_name }}"

      - name: "Add new stage to test_app"
        run: |
          set -euo pipefail

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "        # DO NOT REMOVE: stacks added by Infrastructure Automation scripts" \
            -n '        "${{ steps.config.outputs.stack_name }}",' \
            infrastructure/tests/functional/test_app.py

      - name: "Add new stage to cdk_deploy"
        run: |
          set -euo pipefail

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "          # DO NOT REMOVE: stacks added by Infrastructure Automation scripts" \
            -n '          - "${{ steps.config.outputs.stack_name }}"' \
            .github/workflows/cdk_deploy.yml

      - name: "Add new stage to twilio_config"
        run: |
          set -euo pipefail

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "          # DO NOT REMOVE: stacks added by Infrastructure Automation scripts" \
            -n '          - "${{ steps.config.outputs.stack_name }}"' \
            .github/workflows/twilio_config.yml

        ########################### "Tests" ###########################

      - name: "Run Functional Tests"
        uses: "./.github/actions/cdk_infra_test/"
        with:
          stack_name: "${{ steps.config.outputs.stack_name }}"
          skip_tests: false
          always_skip: "aretihealth,aretihealth-staging,aretihealth-core,survey,survey-staging"          
        env:
          CI_AWS_ACCESS_KEY_ID: "${{ secrets.CI_AWS_ACCESS_KEY_ID }}"
          CI_AWS_SECRET_ACCESS_KEY: "${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}"          

      - name: "Run Backend Tests"
        uses: "./.github/actions/ci_backend/"
        with:
          aws-access-key-id: "${{ secrets.CI_AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}"          
   
      # temporarily disabled      
      # - name: "Run Infrastructure Tests - CDK"
      #   uses: "./.github/actions/ci_infrastructure/"

        ########################### "Build" ###########################
      
      # Disabled steps, because they are not needed for the current task
      # - id: "check_flex_widget"      
      # - id: "flex_widget"    
      # - name: "Render Flex Widget"
      # - name: "Render Flex Widget README"
      # - name: "Add new widget URL to README"                
     
      - name: "Build Flex Admin"
        uses: "./.github/actions/ci_flex_admin/"
        with:
          twilio-account-sid: "${{ secrets.FLEX_ADMIN_STAGING_TWILIO_ACCOUNT_SID }}"
          twilio-auth-token: "${{ secrets.FLEX_ADMIN_STAGING_TWILIO_AUTH_TOKEN }}"
    
        ########################### "Meta Customer Configuration" ###########################

      - name: "Meta Customer Configuration"
        run: | 
            set -euo pipefail
            echo "Meta Customer COnfiguration"
            poetry run python scripts/meta_customer_configuration/meta_customer_configuration.py ${{ inputs.customer_setup_content }}

        ########################### "Infrastructure deploy" ###########################
      
      - name: "Deploy Infrastructure and Backend via CDK"
        uses: "./.github/actions/cdk_infra_deploy/"
        with:
          stack_name: "${{ steps.config.outputs.stack_name }}"
          dry_run: false          
        env:
          CI_AWS_ACCESS_KEY_ID: "${{ secrets.CI_AWS_ACCESS_KEY_ID }}"
          CI_AWS_SECRET_ACCESS_KEY: "${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}"

        ########################### "Finish stage config" ###########################    

      - id: "config_twilio"
        name: "Configure the job"
        run: |
          set -euo pipefail

          stage_name="${{ inputs.customer }}-${{ inputs.stage }}"

          echo "stage_name=${stage_name}" >> "${GITHUB_OUTPUT}"
          echo "stack_name=${{ env.BASE_STACK }}-${stage_name}" >> "${GITHUB_OUTPUT}"          

          # Prepare customer and Customer values
          readarray -d "-" -t "customer" <<< "${stage_name}"
          echo "customer=${customer[0]}" >> "${GITHUB_OUTPUT}"
          echo "customer_label=${customer[0]^}" >> "${GITHUB_OUTPUT}"

          # Convert stage-name to STAGE-NAME
          twilio_secret_infix="${stage_name^^}"
          # Convert STAGE-NAME to STAGE_NAME
          twilio_secret_infix="${twilio_secret_infix//-/_}"

          echo "twilio_secret_infix=${twilio_secret_infix}" >> "${GITHUB_OUTPUT}"

          echo "AWS_DEFAULT_REGION=us-east-1" >> "${GITHUB_ENV}"
          echo "TWILIO_ACCOUNT_SID_SECRET_NAME=FLEX_ADMIN_${twilio_secret_infix}_TWILIO_ACCOUNT_SID" >> "${GITHUB_ENV}"
          echo "TWILIO_AUTH_TOKEN_SECRET_NAME=FLEX_ADMIN_${twilio_secret_infix}_TWILIO_AUTH_TOKEN" >> "${GITHUB_ENV}"
        
      - name: "Run Finish Stage Config"
        uses: "./.github/actions/finish-stage-config"
        with:
          stage_name: "${{ steps.config.outputs.stage_name }}"
          aws_region: "us-east-1"               
          twilio_account_sid: "${{ secrets[env.TWILIO_ACCOUNT_SID_SECRET_NAME] }}"
          twilio_auth_token: "${{ secrets[env.TWILIO_AUTH_TOKEN_SECRET_NAME] }}"                       
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}          
          openai_api_key: "${{ secrets.LAMBDA_FUNCTION_OPENAI_API_KEY }}"
          openai_organization: "${{ secrets.LAMBDA_FUNCTION_OPENAI_ORGANIZATION }}"   
                   
        ########################### "Playwright Workflow" ###########################              

      - name: Trigger Playwright Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'playwright.yml',
              ref: context.ref,
              inputs: {
                stack_name: "${{ steps.config.outputs.stack_name }}",
              },
            });
            console.log('Triggered Playwright Tests Workflow:', response.status);
  
          
      - id: "token"
        uses: "tibdex/github-app-token@v2.1.0"
        with:
          app_id: "${{ secrets.BADABUMP_APP_ID }}"
          private_key: "${{ secrets.BADABUMP_APP_PRIVATE_KEY }}"

      - id: "pr"
        name: "Create pull request with changed files"
        uses: "peter-evans/create-pull-request@v6.1.0"
        with:
          token: "${{ steps.token.outputs.token }}"
          commit-message: |
            feat(infrastructure): Define ${{ steps.config.outputs.stage_name }} stage config

            - Stack name: ${{ steps.config.outputs.stack_name }}
            - Flex Widget: ${{ steps.flex_widget.outputs.url }}
          branch: "feat/create-${{ steps.config.outputs.stage_name }}"
          delete-branch: true
          title: |
            feat(infrastructure): Define ${{ steps.config.outputs.stage_name }} stage config
          body: |
            Stack name: **`${{ steps.config.outputs.stack_name }}`**

            Flex Widget will be available at ${{ steps.flex_widget.outputs.url }}.
          labels: "feat,infrastructure"
          assignees: "${{ github.actor }}"

      - name: "Output PR URL"
        run: |
          set -euo pipefail

          echo "PR has been ${{ steps.pr.outputs.pull-request-operation }}: ${{ steps.pr.outputs.pull-request-url }}" >> "${GITHUB_STEP_SUMMARY}"