# Step 2 to deploy new stage by configuring and setting up Twilio
#
# Requires Step 1 of "Create Stage config" to be completed and new stack be
# deployed into AWS.
#
# Also requires Twilio account to be created and 2 secrets be present it the
# repository:
#
# - `FLEX_ADMIN_{STAGE_NAME}_TWILIO_ACCOUNT_SID`
# - `FLEX_ADMIN_{STAGE_NAME}_TWILIO_AUTH_TOKEN`
#
# For example if stage name is `alcanza-staging` this workflow expects on
# following secrets:
#
# - `FLEX_ADMIN_ALCANZA_STAGING_TWILIO_ACCOUNT_SID`
# - `FLEX_ADMIN_ALCANZA_STAGING_TWILIO_AUTH_TOKEN`

defaults:
  run:
    shell: "bash"

name: "[DEPRECATED] Finish Stage config"
run-name: "Finish Stage config: ${{ inputs.stage_name }}"

on:
  workflow_dispatch:
    inputs:
      stage_name:
        description: "Stage name (e.g. alcanza-staging | helios-prod)"
        required: true
        type: "string"

      aws_region:
        description: "AWS region"
        required: true
        type: "string"
        default: "us-east-1"

env:
  # Python vars
  PYTHONUNBUFFERED: "1"
  # Automation vars
  AWS_PAGER: ""  # Disable pagination of AWS CLI output
  BASE_STACK: "neurality"
  FLEX_FLOW_FRIENDLY_NAME: "Aichat"  # Freindly name for Flex Flow, which will be created by workflow in Twilio
  STUDIO_CHAT_FLOW_FRIENDLY_NAME: "Chat Flow"  # Friendly name of Chat Flow, which already has been created in Twilio Studio
  # Deploy env
  ECR_AWS_REGION: "us-east-1"

jobs:
  create_stage_config:
    name: "Finish Stage config: ${{ inputs.stage_name }}"

    runs-on: "ubuntu-22.04"

    steps:
      - uses: "actions/checkout@v4.1.7"

      - name: "Install system requirements"
        run: "sudo apt-get update -yqq && sudo apt-get install -yq --no-install-recommends openssl"

      - id: "config"
        name: "Configure the job"
        run: |
          set -euo pipefail

          stage_name="${{ inputs.stage_name }}"
          echo "stack_name=${{ env.BASE_STACK }}-${stage_name}" >> "${GITHUB_OUTPUT}"

          # Prepare customer and Customer values
          readarray -d "-" -t "customer" <<< "${stage_name}"
          echo "customer=${customer[0]}" >> "${GITHUB_OUTPUT}"
          echo "customer_label=${customer[0]^}" >> "${GITHUB_OUTPUT}"

          # Convert stage-name to STAGE-NAME
          twilio_secret_infix="${stage_name^^}"
          # Convert STAGE-NAME to STAGE_NAME
          twilio_secret_infix="${twilio_secret_infix//-/_}"

          echo "twilio_secret_infix=${twilio_secret_infix}" >> "${GITHUB_OUTPUT}"

          echo "AWS_DEFAULT_REGION=${{ inputs.aws_region }}" >> "${GITHUB_ENV}"
          echo "TWILIO_ACCOUNT_SID_SECRET_NAME=FLEX_ADMIN_${twilio_secret_infix}_TWILIO_ACCOUNT_SID" >> "${GITHUB_ENV}"
          echo "TWILIO_AUTH_TOKEN_SECRET_NAME=FLEX_ADMIN_${twilio_secret_infix}_TWILIO_AUTH_TOKEN" >> "${GITHUB_ENV}"

      - name: "Install twilio cli"
        uses: "./.github/actions/install_node/"
        with:
          install-twilio-cli: "true"

      # If secrets have been properly installed - the following command will
      # show the Twilio account short details
      #
      # If not, please setup Twilio secrets in the repository
      - name: "Check Twilio secrets"
        run: "twilio api core accounts list"
        env:
          TWILIO_ACCOUNT_SID: "${{ secrets[env.TWILIO_ACCOUNT_SID_SECRET_NAME] }}"
          TWILIO_AUTH_TOKEN: "${{ secrets[env.TWILIO_AUTH_TOKEN_SECRET_NAME] }}"

      - id: "twilio"
        name: "Configure Twilio details"
        run: |
          set -euo pipefail

          function get_flex_flow_sid() {
            twilio api flex v1 flex-flows list -o json | jq -r '.[0].sid'
          }

          # Grab Account name
          accounts_output="$(twilio api core accounts list -o json)"
          account_sid="$(echo "${accounts_output}" | jq -r '.[0].sid')"
          account_sid="${account_sid:2}"  # Strip AC from SID to stop GitHub Actions from masking this value
          account_name="$(echo "${accounts_output}" | jq -r '.[0].friendlyName')"

          # List all available phone numbers and pick first as default one
          phone_number="$(twilio phone-numbers list -o json | jq -r '.[0].phoneNumber')"

          # List all conversations services and pick first service
          conversations_service_sid="$(twilio api conversations v1 services list -o json | jq -r '.[0].sid')"

          # Check if Flex Flow SID already exists
          flex_flow_sid="$(get_flex_flow_sid)"
          # If not -- create new one
          if [ -z "${flex_flow_sid}" ]; then
            studio_flow_sid="$(twilio api studio v2 flows list -o json | jq -r '.[] | select(.friendlyName == "${{ env.STUDIO_CHAT_FLOW_FRIENDLY_NAME }}") | .sid')"

            echo "Creating new Flex Flow for Studio integration. Chat Service: ${conversations_service_sid}, Flex Flow: ${studio_flow_sid}"
            twilio api flex v1 flex-flows create \
              --channel-type="web" \
              --chat-service-sid="${conversations_service_sid}" \
              --friendly-name="${{ env.FLEX_FLOW_FRIENDLY_NAME }}" \
              --enabled \
              --integration-type="studio" \
              --integration.flow-sid="${studio_flow_sid}" \
              --janitor-enabled

            flex_flow_sid="$(get_flex_flow_sid)"
          fi

          # Set outputs for latter usage
          echo "account_sid=${account_sid}" >> "${GITHUB_OUTPUT}"
          echo "account_name=${account_name}" >> "${GITHUB_OUTPUT}"
          echo "phone_number=${phone_number}" >> "${GITHUB_OUTPUT}"
          echo "conversations_service_sid=${conversations_service_sid}" >> "${GITHUB_OUTPUT}"
          echo "flex_flow_sid=${flex_flow_sid}" >> "${GITHUB_OUTPUT}"

          # And update job summary for visibility
          echo "## Twilio Details" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Account SID: **AC**${account_sid}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Account Name: **${account_name}**" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Phone Number: ${phone_number}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Conversations Service SID: \`${conversations_service_sid}\` (_for post-webhook update_)" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Flex Flow SID: \`${flex_flow_sid}\` (_for Flex Widget update_)" >> "${GITHUB_STEP_SUMMARY}"
        env:
          TWILIO_ACCOUNT_SID: "${{ secrets[env.TWILIO_ACCOUNT_SID_SECRET_NAME] }}"
          TWILIO_AUTH_TOKEN: "${{ secrets[env.TWILIO_AUTH_TOKEN_SECRET_NAME] }}"

      - id: "twilio-api-key"
        name: "Create new Twilio API Key"
        run: |
          set -euo pipefail

          keys_output="$(twilio api core keys create -o json --friendly-name="[AUTO] API Key for ${{ steps.config.outputs.stack_name }}")"
          sid="$(echo "${keys_output}" | jq -r '.[0].sid')"

          echo "sid=${sid}" >> "${GITHUB_OUTPUT}"
          echo "secret=$(echo "${keys_output}" | jq -r '.[0].secret')" >> "${GITHUB_OUTPUT}"

          echo "- API Key: \`${sid}\`" >> "${GITHUB_STEP_SUMMARY}"
        env:
          TWILIO_ACCOUNT_SID: "${{ secrets[env.TWILIO_ACCOUNT_SID_SECRET_NAME] }}"
          TWILIO_AUTH_TOKEN: "${{ secrets[env.TWILIO_AUTH_TOKEN_SECRET_NAME] }}"

      - uses: "./.github/actions/setup_cdk/"
        with:
          # TODO: Do not use AWS access key for assuming CDK AWS role
          cdk-aws-access-key-id: "${{ secrets.CDK_AWS_ACCESS_KEY_ID }}"
          cdk-aws-secret-access-key: "${{ secrets.CDK_AWS_SECRET_ACCESS_KEY }}"
          cdk-aws-region: "${{ env.AWS_DEFAULT_REGION }}"
          cdk-role-to-assume: "${{ secrets.CDK_AWS_ROLE_TO_ASSUME }}"
          cdk-role-duration-seconds: 7200
          ecr-aws-access-key-id: "${{ secrets.ECR_AWS_ACCESS_KEY_ID }}"
          ecr-aws-secret-access-key: "${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}"
          ecr-aws-region: "${{ env.ECR_AWS_REGION }}"

      - name: "Configure Twilio Account SID for stack"
        uses: "./.github/actions/twilio_config/"
        with:
          stack-name: "${{ steps.config.outputs.stack_name }}"
          account-sid: "${{ steps.twilio.outputs.account_sid }}"
          api-key: "${{ steps.twilio-api-key.outputs.sid }}"
          api-secret: "${{ steps.twilio-api-key.outputs.secret }}"
          default-phone-number: "${{ steps.twilio.outputs.phone_number }}"
          default-author-name: "${{ steps.config.outputs.customer_label }}"
          default-scenario-slug: "${{ steps.config.outputs.customer }}"

      # If stack has been deployed - the following command will grab encryption
      # key for SSM & Lambda Function URL from Outputs
      #
      # If not, please wait until stack has been properly deployed to AWS
      - id: "cloudformation"
        name: "Setup CloudFormation vars"
        run: |
          set -euo pipefail

          stack_name="${{ steps.config.outputs.stack_name }}"

          key_id="$(bash ./.github/scripts/stack-output-value.sh "${stack_name}" "EnvironmentEncryptionKeyId")"          
          lambda_url="$(bash ./.github/scripts/stack-output-value.sh "${stack_name}" "Route53BackendCNAMERecordName")"

          echo "key_id=${key_id}" >> "${GITHUB_OUTPUT}"
          echo "lambda_url=${lambda_url}" >> "${GITHUB_OUTPUT}"

          echo "---" >> "${GITHUB_STEP_SUMMARY}"
          echo "## AWS CloudFormation Details" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Encryption Key ID: \`${key_id}\`" >> "${GITHUB_STEP_SUMMARY}"
          
      - name: "Setup SSM parameters for lambda functions"
        run: |
          set -euo pipefail

          stack_name="${{ steps.config.outputs.stack_name }}"
          stage_name="${{ inputs.stage_name }}"
          key_id="${{ steps.cloudformation.outputs.key_id }}"

          function set_ssm_parameter() {
            parameter="${1}"
            value="${2}"

            parameter_name="/${stack_name}/lambda/${parameter}"

            if [ -z "$(aws ssm get-parameter --name="${parameter_name}" 2> /dev/null || :)" ]; then
              aws ssm put-parameter \
                --name="${parameter_name}" \
                --description="${parameter} secret for ${stack_name} stack" \
                --value="${value}" \
                --type="SecureString" \
                --key-id="${key_id}" \
                --tags="Key=CDK,Value=false" \
                --tags="Key=InfrastructureAutomation,Value=true" \
                --tags="Key=Stack,Value=${stack_name}" \
                --tags="Key=Stage,Value=${stage_name}"
              echo "Parameter ${parameter_name} has been set in SSM"
            else
              echo "Do not update ${parameter_name} as it already present in SSM"
            fi
          }

          function create_api_key() {
            KEY=`openssl rand -hex 16 | base64`
          }

          create_api_key

          set_ssm_parameter "WEBHOOK_API_KEY" "$KEY"                    
          set_ssm_parameter "OPENAI_API_KEY" "${{ env.OPENAI_API_KEY }}"
          set_ssm_parameter "OPENAI_ORGANIZATION" "${{ env.OPENAI_ORGANIZATION }}"          

          echo "SSM parameters have been set. All OK!"
        env:          
          OPENAI_API_KEY: "${{ secrets.LAMBDA_FUNCTION_OPENAI_API_KEY }}"
          OPENAI_ORGANIZATION: "${{ secrets.LAMBDA_FUNCTION_OPENAI_ORGANIZATION }}"          

      - name: "Setup post-webhook for Twilio Conversations Service"
        run: |
          set -euo pipefail

          service_sid="${{ steps.twilio.outputs.conversations_service_sid }}"
          lambda_url="${{ steps.cloudformation.outputs.lambda_url }}"

          filters="onMessageAdded"
          post_webhook_url="${lambda_url}webhooks/twilio/conversation"

          twilio api conversations v1 services configuration webhooks update \
            --chat-service-sid="${service_sid}" \
            --filters="${filters}" \
            --method="POST" \
            --post-webhook-url="${post_webhook_url}"

          echo "Post-webhook for ${filters} event(s) set for service ${service_sid} to use: ${post_webhook_url}. All OK!"
        env:
          TWILIO_ACCOUNT_SID: "${{ secrets[env.TWILIO_ACCOUNT_SID_SECRET_NAME] }}"
          TWILIO_AUTH_TOKEN: "${{ secrets[env.TWILIO_AUTH_TOKEN_SECRET_NAME] }}"

      - uses: "./.github/actions/install_backend/"
        with:
          cache-key-suffix: "-infrastructure-test"
          poetry-install-args: "--only=infrastructure,test"

      - name: "Update Flex Admin config"
        run: |
          set -euo pipefail

          stack_name="${{ steps.config.outputs.stack_name }}"
          stage_name="${{ inputs.stage_name }}"
          customer_label="${{ steps.config.outputs.customer_label }}"

          account_sid="${{ steps.twilio.outputs.account_sid }}"
          account_name="${{ steps.twilio.outputs.account_name }}"

          lambda_url="${{ steps.cloudformation.outputs.lambda_url }}"
          lambda_url="${lambda_url::-1}"

          api_url="$(poetry run python3 infrastructure/automation/scripts/get_stage_url.py "${stage_name}" -u backend)"
          chat_url="$(poetry run python3 infrastructure/automation/scripts/get_stage_url.py "${stage_name}" -u flex_widget)"

          echo "---" >> "${GITHUB_STEP_SUMMARY}"
          echo "## Infrastructure Details" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Backend URL: ${api_url}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- Chat (Flex Widget) URL: ${chat_url}" >> "${GITHUB_STEP_SUMMARY}"

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "    // DO NOT REMOVE: names added by Infrastructure Automation scripts" \
            -n "    | \"${account_name}\"" \
            twilio/admin/src/configs.ts

          new_config="// ${account_name} (${stack_name})
          const AC${account_sid}: Config = {
            sid: \"AC${account_sid}\",
            name: \"${account_name}\",
            logoUrl: \"${chat_url}/logo.png\",
            smsPrefix: \"This is ${customer_label} reaching back from our web chat.\n\",
            withAssistance: false,
            lambda_url:
              \"${lambda_url}\",
            api: \"${lambda_url}\",
          };
          "

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "// DO NOT REMOVE: config definitions added by Infrastructure Automation scripts" \
            -n "${new_config}" \
            twilio/admin/src/configs.ts

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "  // DO NOT REMOVE: configs added by Infrastructure Automation scripts" \
            -n "  AC${account_sid}," \
            twilio/admin/src/configs.ts

      - name: "Update Flex Admin deploy workflow"
        run: |
          set -euo pipefail

          stack_name="${{ steps.config.outputs.stack_name }}"
          choice="${{ steps.twilio.outputs.account_name }} (${stack_name})"

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "          # DO NOT REMOVE: accounts added by Infrastructure Automation scripts" \
            -n "          - \"${choice}\"" \
            .github/workflows/flex_admin_deploy.yml

          new_infix="            \"${choice}\")
                        echo \"Setup to use ${stack_name} Twilio credentials\"
                        twilio_secret_infix=\"${{ steps.config.outputs.twilio_secret_infix }}\"
                        ;;
          "

          poetry run python3 infrastructure/automation/scripts/add_line.py \
            -A "            # DO NOT REMOVE: infixes added by Infrastructure Automation scripts" \
            -n "${new_infix}" \
            .github/workflows/flex_admin_deploy.yml


      - name: "Update Flex widget"
        run: |
          set -euo pipefail

          # OS independent version of `sed -i`
          function replace_string() {
            file_name="${1}"
            find_string="${2}"
            replace_to="${3}"
            python3 -c "from pathlib import Path; (p := Path('${file_name}')).write_text(p.read_text().replace('${find_string}', '${replace_to}'))"
          }

          stack_name="${{ steps.config.outputs.stack_name }}"
          index_html="twilio/flex-widgets/${stack_name}/index.html"

          replace_string "${index_html}" "FLEX_FLOW_SID_TO_BE_CONFIGURED" "${{ steps.twilio.outputs.flex_flow_sid }}"
          replace_string "${index_html}" "LAMBDA_URL_TO_BE_CONFIGURED" "${{ steps.cloudformation.outputs.lambda_url }}"

      - id: "token"
        uses: "tibdex/github-app-token@v2.1.0"
        with:
          app_id: "${{ secrets.BADABUMP_APP_ID }}"
          private_key: "${{ secrets.BADABUMP_APP_PRIVATE_KEY }}"

      - id: "pr"
        name: "Create pull request with changed files"
        uses: "peter-evans/create-pull-request@v7.0.6"
        with:
          token: "${{ steps.token.outputs.token }}"
          commit-message: |
            feat(infrastructure): Finalize ${{ inputs.stage_name }} stage config

            - Stack name: ${{ steps.config.outputs.stack_name }}
            - Twilio Account SID: ${{ steps.twilio.outputs.account_sid }}
            - Conversations Service SID: ${{ steps.twilio.outputs.conversations_service_sid }}
            - Flex Flow SID: ${{ steps.twilio.outputs.flex_flow_sid }}
            - API Key: ${{ steps.twilio-api-key.outputs.sid }}
            - Lambda Function URL: ${{ steps.cloudformation.outputs.lambda_url }}
          branch: "feat/finish-${{ inputs.stage_name }}"
          delete-branch: true
          title: |
            feat(infrastructure): Finalize ${{ inputs.stage_name }} stage config
          body: |
            Stack name: **`${{ steps.config.outputs.stack_name }}`**

            Twilio has been configured for account **AC**${{ steps.twilio.outputs.account_sid }} as follows,

            - Conversations Service SID: `${{ steps.twilio.outputs.conversations_service_sid }}`
            - Flex Flow SID: `${{ steps.twilio.outputs.flex_flow_sid }}`
            - API Key: `${{ steps.twilio-api-key.outputs.sid }}`

            Twilio and Flex Widget configured to use Lambda Function URL: ${{ steps.cloudformation.outputs.lambda_url }}
          labels: "feat,infrastructure,twilio"
          assignees: "${{ github.actor }}"

      - name: "Output PR URL"
        run: |
          set -euo pipefail

          echo "---" >> "${GITHUB_STEP_SUMMARY}"
          echo "PR has been ${{ steps.pr.outputs.pull-request-operation }}: ${{ steps.pr.outputs.pull-request-url }}" >> "${GITHUB_STEP_SUMMARY}"